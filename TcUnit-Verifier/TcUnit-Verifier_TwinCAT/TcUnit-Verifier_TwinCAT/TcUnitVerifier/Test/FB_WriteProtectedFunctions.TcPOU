<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_WriteProtectedFunctions" Id="{812062d4-e1c0-4591-8720-04dcd5e89c1e}" SpecialFunc="None">
    <Declaration><![CDATA[// This testsuite tests the WRITE_PROTECTED_* helper functions.
FUNCTION_BLOCK FB_WriteProtectedFunctions EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[Test_WRITE_PROTECTED_BOOL();
Test_WRITE_PROTECTED_BYTE();
Test_WRITE_PROTECTED_DATE();
Test_WRITE_PROTECTED_DATE_AND_TIME();
Test_WRITE_PROTECTED_DINT();
Test_WRITE_PROTECTED_DWORD();
Test_WRITE_PROTECTED_INT();
TEST_WRITE_PROTECTED_LINT();
Test_WRITE_PROTECTED_LREAL();
Test_WRITE_PROTECTED_LWORD();
Test_WRITE_PROTECTED_REAL();
Test_WRITE_PROTECTED_SINT();
Test_WRITE_PROTECTED_STRING();
Test_WRITE_PROTECTED_TIME();
Test_WRITE_PROTECTED_TIME_OF_DAY();
Test_WRITE_PROTECTED_UDINT();
Test_WRITE_PROTECTED_UINT();
Test_WRITE_PROTECTED_USINT();
Test_WRITE_PROTECTED_ULINT();
Test_WRITE_PROTECTED_WORD();
Test_WRITE_PROTECTED_WSTRING();]]></ST>
    </Implementation>
    <Method Name="Test_WRITE_PROTECTED_BOOL" Id="{11a2dddd-2fbe-4039-a6b5-d4eaf7d9434c}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_BOOL
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_BOOL');

WRITE_PROTECTED_BOOL(ADR(ProtectedVariables.InputBOOL), TRUE);
AssertEquals_BOOL(TRUE, ProtectedVariables.InputBOOL, 'Overwriting protected InputBOOL');

WRITE_PROTECTED_BOOL(ADR(ProtectedVariables.VarBOOL), TRUE);
AssertEquals_BOOL(TRUE, ProtectedVariables.VarBOOL, 'Overwriting protected VarBOOL');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_BYTE" Id="{a2b467b1-3690-41a5-9320-4bc1f69bef8a}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_BYTE
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_BYTE');

WRITE_PROTECTED_BYTE(ADR(ProtectedVariables.InputBYTE), 1);
AssertEquals_BYTE(1, ProtectedVariables.InputBYTE, 'Overwriting protected InputBYTE');

WRITE_PROTECTED_BYTE(ADR(ProtectedVariables.VarBYTE), 1);
AssertEquals_BYTE(1, ProtectedVariables.VarBYTE, 'Overwriting protected VarBYTE');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_DATE" Id="{2510c371-47ea-4abe-a097-c4e0398a7a24}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_DATE
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_DATE');

WRITE_PROTECTED_DATE(ADR(ProtectedVariables.InputDATE), D#2000-01-01);
AssertEquals_DATE(D#2000-01-01, ProtectedVariables.InputDATE, 'Overwriting protected InputDATE');

WRITE_PROTECTED_DATE(ADR(ProtectedVariables.VarDATE), D#2000-01-01);
AssertEquals_DATE(D#2000-01-01, ProtectedVariables.VarDATE, 'Overwriting protected VarDATE');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_DATE_AND_TIME" Id="{e35cbab7-8fcd-423a-8410-af8b494e33af}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_DATE_AND_TIME
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_DATE_AND_TIME');

WRITE_PROTECTED_DATE_AND_TIME(ADR(ProtectedVariables.InputDATE_AND_TIME), DT#2000-01-01-00:00);
AssertEquals_DATE_AND_TIME(DT#2000-01-01-00:00, ProtectedVariables.InputDATE_AND_TIME, 'Overwriting protected InputDATE_AND_TIME');

WRITE_PROTECTED_DATE_AND_TIME(ADR(ProtectedVariables.VarDATE_AND_TIME), DT#2000-01-01-00:00);
AssertEquals_DATE_AND_TIME(DT#2000-01-01-00:00, ProtectedVariables.VarDATE_AND_TIME, 'Overwriting protected VarDATE_AND_TIME');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_DINT" Id="{4e7c60b5-8b1c-4049-9622-c0382fbb2365}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_DINT
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_DINT');

WRITE_PROTECTED_DINT(ADR(ProtectedVariables.InputDINT), 1);
AssertEquals_DINT(1, ProtectedVariables.InputDINT, 'Overwriting protected InputDINT');

WRITE_PROTECTED_DINT(ADR(ProtectedVariables.VarDINT), 1);
AssertEquals_DINT(1, ProtectedVariables.VarDINT, 'Overwriting protected VarDINT');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_DWORD" Id="{0a357bc6-9801-4812-bff6-98077c8a0a93}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_DWORD
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_DWORD');

WRITE_PROTECTED_DWORD(ADR(ProtectedVariables.InputDWORD), 1);
AssertEquals_DWORD(1, ProtectedVariables.InputDWORD, 'Overwriting protected InputDWORD');

WRITE_PROTECTED_DWORD(ADR(ProtectedVariables.VarDWORD), 1);
AssertEquals_DWORD(1, ProtectedVariables.VarDWORD, 'Overwriting protected VarDWORD');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_INT" Id="{f27a38f4-d1ea-45d8-a73c-dd6465b9ad58}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_INT
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_INT');

WRITE_PROTECTED_INT(ADR(ProtectedVariables.InputINT), 1);
AssertEquals_INT(1, ProtectedVariables.InputINT, 'Overwriting protected InputINT');

WRITE_PROTECTED_INT(ADR(ProtectedVariables.VarINT), 1);
AssertEquals_INT(1, ProtectedVariables.VarINT, 'Overwriting protected VarINT');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_LINT" Id="{71762a34-71d9-45d0-9566-adc896d905f4}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_LINT
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_LINT');

WRITE_PROTECTED_LINT(ADR(ProtectedVariables.InputLINT), 5);
AssertEquals_LINT(5, ProtectedVariables.InputLINT, 'Overwriting protected InputLINT');

WRITE_PROTECTED_LINT(ADR(ProtectedVariables.VarLINT), 5);
AssertEquals_LINT(5, ProtectedVariables.VarLINT, 'Overwriting protected VarLINT');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_LREAL" Id="{15de40fe-dc84-4408-be86-5481783ca3e7}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_LREAL
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_LREAL');

WRITE_PROTECTED_LREAL(ADR(ProtectedVariables.InputLREAL), 1);
AssertEquals_LREAL(1, ProtectedVariables.InputLREAL, 0, 'Overwriting protected InputLREAL');

WRITE_PROTECTED_LREAL(ADR(ProtectedVariables.VarLREAL), 1);
AssertEquals_LREAL(1, ProtectedVariables.VarLREAL, 0, 'Overwriting protected VarLREAL');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_LWORD" Id="{0651a1a1-b763-4766-9548-72ef4ae96b4d}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_LWORD
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_LWORD');

WRITE_PROTECTED_LWORD(ADR(ProtectedVariables.InputLWORD), 4);
AssertEquals_LWORD(4, ProtectedVariables.InputLWORD, 'Overwriting protected InputLWORD');

WRITE_PROTECTED_LWORD(ADR(ProtectedVariables.VarLWORD), 4);
AssertEquals_LWORD(4, ProtectedVariables.VarLWORD, 'Overwriting protected VarLWORD');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_REAL" Id="{26a46831-e47f-4e38-bf11-7776e94ca1a4}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_REAL
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_REAL');

WRITE_PROTECTED_REAL(ADR(ProtectedVariables.InputREAL), 1);
AssertEquals_REAL(1, ProtectedVariables.InputREAL, 0, 'Overwriting protected InputREAL');

WRITE_PROTECTED_REAL(ADR(ProtectedVariables.VarREAL), 1);
AssertEquals_REAL(1, ProtectedVariables.VarREAL, 0, 'Overwriting protected VarREAL');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_SINT" Id="{aab80437-85e4-45a9-bd68-7a6786ffe91a}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_SINT
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_SINT');

WRITE_PROTECTED_SINT(ADR(ProtectedVariables.InputSINT), 1);
AssertEquals_SINT(1, ProtectedVariables.InputSINT, 'Overwriting protected InputSINT');

WRITE_PROTECTED_SINT(ADR(ProtectedVariables.VarSINT), 1);
AssertEquals_SINT(1, ProtectedVariables.VarSINT, 'Overwriting protected VarSINT');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_STRING" Id="{efe95956-d83a-443d-917c-316c5a36701a}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_STRING
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_STRING');

WRITE_PROTECTED_STRING(ADR(ProtectedVariables.InputSTRING), 'words');
AssertEquals_STRING('words', ProtectedVariables.InputSTRING, 'Overwriting protected InputSTRING');

WRITE_PROTECTED_STRING(ADR(ProtectedVariables.VarSTRING), 'words');
AssertEquals_STRING('words', ProtectedVariables.VarSTRING, 'Overwriting protected VarSTRING');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_TIME" Id="{e37750d2-5a33-4790-8cff-71ab8caece8b}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_TIME
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_TIME');

WRITE_PROTECTED_TIME(ADR(ProtectedVariables.InputTIME), T#1S);
AssertEquals_TIME(T#1S, ProtectedVariables.InputTIME, 'Overwriting protected InputTIME');

WRITE_PROTECTED_TIME(ADR(ProtectedVariables.VarTIME), T#1S);
AssertEquals_TIME(T#1S, ProtectedVariables.VarTIME, 'Overwriting protected VarTIME');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_TIME_OF_DAY" Id="{1264a760-0d2a-4889-88b2-30d55662bb73}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_TIME_OF_DAY
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_TIME_OF_DAY');

WRITE_PROTECTED_TIME_OF_DAY(ADR(ProtectedVariables.InputTIME_OF_DAY), TOD#11:11);
AssertEquals_TIME_OF_DAY(TOD#11:11, ProtectedVariables.InputTIME_OF_DAY, 'Overwriting protected InputTIME_OF_DAY');

WRITE_PROTECTED_TIME_OF_DAY(ADR(ProtectedVariables.VarTIME_OF_DAY), TOD#11:11);
AssertEquals_TIME_OF_DAY(TOD#11:11, ProtectedVariables.VarTIME_OF_DAY, 'Overwriting protected VarTIME_OF_DAY');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_UDINT" Id="{82609066-fb5e-46e7-9e57-65869d828270}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_UDINT
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_UDINT');

WRITE_PROTECTED_UDINT(ADR(ProtectedVariables.InputUDINT), 1);
AssertEquals_UDINT(1, ProtectedVariables.InputUDINT, 'Overwriting protected InputUDINT');

WRITE_PROTECTED_UDINT(ADR(ProtectedVariables.VarUDINT), 1);
AssertEquals_UDINT(1, ProtectedVariables.VarUDINT, 'Overwriting protected VarUDINT');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_UINT" Id="{7f47e13a-351b-4283-b458-621b21173f32}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_UINT
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_UINT');

WRITE_PROTECTED_UINT(ADR(ProtectedVariables.InputUINT), 1);
AssertEquals_UINT(1, ProtectedVariables.InputUINT, 'Overwriting protected InputUINT');

WRITE_PROTECTED_UINT(ADR(ProtectedVariables.VarUINT), 1);
AssertEquals_UINT(1, ProtectedVariables.VarUINT, 'Overwriting protected VarUINT');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_ULINT" Id="{4de6347a-c65a-43c1-b5df-01a949bce5ce}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_ULINT
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_ULINT');

WRITE_PROTECTED_ULINT(ADR(ProtectedVariables.InputULINT), 8);
AssertEquals_ULINT(8, ProtectedVariables.InputULINT, 'Overwriting protected InputULINT');

WRITE_PROTECTED_ULINT(ADR(ProtectedVariables.VarULINT), 8);
AssertEquals_ULINT(8, ProtectedVariables.VarULINT, 'Overwriting protected VarULINT');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_USINT" Id="{6592f882-59d3-49e2-82d2-e6fd44600d68}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_USINT
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_USINT');

WRITE_PROTECTED_USINT(ADR(ProtectedVariables.InputUSINT), 1);
AssertEquals_USINT(1, ProtectedVariables.InputUSINT, 'Overwriting protected InputUSINT');

WRITE_PROTECTED_USINT(ADR(ProtectedVariables.VarUSINT), 1);
AssertEquals_USINT(1, ProtectedVariables.VarUSINT, 'Overwriting protected VarUSINT');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_WORD" Id="{386f4047-1083-4370-89d2-3d1998d7c92c}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_WORD
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_WORD');

WRITE_PROTECTED_WORD(ADR(ProtectedVariables.InputWORD), 1);
AssertEquals_WORD(1, ProtectedVariables.InputWORD, 'Overwriting protected InputWORD');

WRITE_PROTECTED_WORD(ADR(ProtectedVariables.VarWORD), 1);
AssertEquals_WORD(1, ProtectedVariables.VarWORD, 'Overwriting protected VarWORD');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_WRITE_PROTECTED_WSTRING" Id="{2de6c70d-8caa-48f3-bf87-e9275e199bed}">
      <Declaration><![CDATA[METHOD Test_WRITE_PROTECTED_WSTRING
VAR
    ProtectedVariables : FB_ProtectedVariables;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_WRITE_PROTECTED_WSTRING');

WRITE_PROTECTED_WSTRING(ADR(ProtectedVariables.InputWSTRING), "ŢŶǮ");
AssertEquals_WSTRING("ŢŶǮ", ProtectedVariables.InputWSTRING, 'Overwriting protected InputWSTRING');

WRITE_PROTECTED_WSTRING(ADR(ProtectedVariables.VarWSTRING), "ŢŶǮ");
AssertEquals_WSTRING("ŢŶǮ", ProtectedVariables.VarWSTRING, 'Overwriting protected VarWSTRING');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>