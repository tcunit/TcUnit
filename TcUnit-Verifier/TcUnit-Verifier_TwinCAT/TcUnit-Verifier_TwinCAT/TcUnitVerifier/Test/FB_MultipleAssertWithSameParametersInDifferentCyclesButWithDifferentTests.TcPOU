<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_MultipleAssertWithSameParametersInDifferentCyclesButWithDifferentTests" Id="{0b8cb81e-eae8-42e4-b5ff-552a60654ab4}" SpecialFunc="None">
    <Declaration><![CDATA[(*
    This test-suite runs several asserts with the same parameters (same expected, actual, message), calling the asserts
    in different cycles and using different tests.
    On top of this, we will call new asserts (though with same parameters) in later cycles.
    The reason we want the framework to support this is that theoretically the user could want to do an assert with the
    same message, in different tests, with the same data values for both expected and actual, although the data that the
    user does the assert on might be from different data sets.
*)
FUNCTION_BLOCK FB_MultipleAssertWithSameParametersInDifferentCyclesButWithDifferentTests EXTENDS TcUnit.FB_TestSuite
VAR
    TimerAgain : TON := (PT := T#1S); // Timer to call "AssertSeveralTimesAgain"
    TimerAgainAgain : TON := (PT := T#5S); // Timer to call "AssertSeveralTimesAgainAgain"
    CalledAll : BOOL; // Indication of whether we've called all tests
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[TimerAgain(IN := TRUE);

Assert_SeveralTimes();

IF TimerAgain.Q THEN
    TimerAgainAgain(IN := TRUE);
    Assert_SeveralTimesAgain();
END_IF

IF TimerAgainAgain.Q THEN
    Assert_SeveralTimesAgainAgain();
    CalledAll := TRUE;
END_IF]]></ST>
    </Implementation>
    <Method Name="Assert_SeveralTimes" Id="{5aa8b452-9e18-4334-94e6-939c93281b5b}">
      <Declaration><![CDATA[METHOD PRIVATE Assert_SeveralTimes
VAR
    a : DWORD := 16#12345678;
    b : DWORD := 16#90ABCDEF;

    c : DWORD := 16#12345678;
    d : DWORD := 16#90ABCDEF;

    e : DWORD := 16#12345678;
    f : DWORD := 16#90ABCDEF;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Assert_SeveralTimes');

AssertEquals_DWORD(Expected := a,
                   Actual := b,
                   Message := 'Values differ');

AssertEquals_DWORD(Expected := c,
                   Actual := d,
                   Message := 'Values differ');

AssertEquals_DWORD(Expected := e,
                   Actual := f,
                   Message := 'Values differ');

IF CalledAll THEN
    TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Assert_SeveralTimesAgain" Id="{7d562c97-c3cc-4d37-92fc-9c428ab6a443}">
      <Declaration><![CDATA[METHOD PRIVATE Assert_SeveralTimesAgain
VAR
    a : DWORD := 16#12345678;
    b : DWORD := 16#90ABCDEF;

    c : DWORD := 16#12345678;
    d : DWORD := 16#90ABCDEF;

    e : DWORD := 16#12345678;
    f : DWORD := 16#90ABCDEF;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Assert_SeveralTimesAgain');

AssertEquals_DWORD(Expected := a,
                   Actual := b,
                   Message := 'Values differ');

AssertEquals_DWORD(Expected := c,
                   Actual := d,
                   Message := 'Values differ');

AssertEquals_DWORD(Expected := e,
                   Actual := f,
                   Message := 'Values differ');

IF CalledAll THEN
    TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Assert_SeveralTimesAgainAgain" Id="{13865f28-fa53-4b31-8e3e-fc9c2f3580da}">
      <Declaration><![CDATA[METHOD PRIVATE Assert_SeveralTimesAgainAgain
VAR
    a : DWORD := 16#12345678;
    b : DWORD := 16#90ABCDEF;

    c : DWORD := 16#12345678;
    d : DWORD := 16#90ABCDEF;

    e : DWORD := 16#12345678;
    f : DWORD := 16#90ABCDEF;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Assert_SeveralTimesAgainAgain');

AssertEquals_DWORD(Expected := a,
                   Actual := b,
                   Message := 'Values differ');

AssertEquals_DWORD(Expected := c,
                   Actual := d,
                   Message := 'Values differ');

AssertEquals_DWORD(Expected := e,
                   Actual := f,
                   Message := 'Values differ');

IF CalledAll THEN
    TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>