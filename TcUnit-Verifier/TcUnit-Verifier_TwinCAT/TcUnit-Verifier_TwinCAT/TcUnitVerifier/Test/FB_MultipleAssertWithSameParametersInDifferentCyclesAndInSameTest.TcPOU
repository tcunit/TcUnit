<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_MultipleAssertWithSameParametersInDifferentCyclesAndInSameTest" Id="{b90749b6-04c8-4717-bf88-8db2fbf83f6a}" SpecialFunc="None">
    <Declaration><![CDATA[(*
    This test-suite runs several asserts with the same parameters (same expected, actual, message), calling the asserts
    in different cycles and using the same test.
    On top of this, we will call new asserts (though with same parameters) in later cycles.
    The reason we want the framework to support this is that theoretically the user could want to do an assert with the
    same message, using the same test with the same data values for both expected and actual, and splitting the asserts
    on different cycles.
*)
FUNCTION_BLOCK FB_MultipleAssertWithSameParametersInDifferentCyclesAndInSameTest EXTENDS TcUnit.FB_TestSuite
VAR
    TimerAgain : TON := (PT := T#1S); // Timer to call "AssertSeveralTimesAgain"
    TimerAgainAgain : TON := (PT := T#5S); // Timer to call "AssertSeveralTimesAgainAgain"
    CalledAll : BOOL; // Indication of whether we've called all tests
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[Assert_SeveralTimes();]]></ST>
    </Implementation>
    <Method Name="Assert_SeveralTimes" Id="{fec25683-5d3d-4525-82ab-3bcd5de9b899}">
      <Declaration><![CDATA[METHOD PRIVATE Assert_SeveralTimes
VAR
    a : DWORD := 16#12345678;
    b : DWORD := 16#90ABCDEF;

    c : DWORD := 16#12345678;
    d : DWORD := 16#90ABCDEF;

    e : DWORD := 16#12345678;
    f : DWORD := 16#90ABCDEF;

    g : DWORD := 16#12345678;
    h : DWORD := 16#90ABCDEF;

    i : DWORD := 16#12345678;
    j : DWORD := 16#90ABCDEF;

    k : DWORD := 16#12345678;
    l : DWORD := 16#90ABCDEF;

    m : DWORD := 16#12345678;
    n : DWORD := 16#90ABCDEF;

    o : DWORD := 16#12345678;
    p : DWORD := 16#90ABCDEF;

    q : DWORD := 16#12345678;
    rr : DWORD := 16#90ABCDEF;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Assert_SeveralTimes');

AssertEquals_DWORD(Expected := a,
                   Actual := b,
                   Message := 'Values differ');
AssertEquals_DWORD(Expected := c,
                   Actual := d,
                   Message := 'Values differ');
AssertEquals_DWORD(Expected := e,
                   Actual := f,
                   Message := 'Values differ');

TimerAgain(IN := TRUE);
IF TimerAgain.Q THEN
    TimerAgainAgain(IN := TRUE);
    AssertEquals_DWORD(Expected := g,
                       Actual := h,
                       Message := 'Values differ');
    AssertEquals_DWORD(Expected := i,
                       Actual := j,
                       Message := 'Values differ');
    AssertEquals_DWORD(Expected := k,
                       Actual := l,
                       Message := 'Values differ');
END_IF

IF TimerAgainAgain.Q THEN
    AssertEquals_DWORD(Expected := m,
                       Actual := n,
                       Message := 'Values differ');
    AssertEquals_DWORD(Expected := o,
                       Actual := p,
                       Message := 'Values differ');
    AssertEquals_DWORD(Expected := q,
                       Actual := rr,
                       Message := 'Values differ');
    CalledAll := TRUE;
    TEST_FINISHED();
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>