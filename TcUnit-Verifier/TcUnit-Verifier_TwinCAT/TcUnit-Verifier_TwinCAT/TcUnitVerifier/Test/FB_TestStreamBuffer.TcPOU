<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_TestStreamBuffer" Id="{93715912-c883-4a03-854d-0419c551b14f}" SpecialFunc="None">
    <Declaration><![CDATA[(*
    Contains tests that verify the StreamBuffer function block methods
*)
FUNCTION_BLOCK FB_TestStreamBuffer EXTENDS TcUnit.FB_TestSuite
VAR
    Stream : FB_StreamBuffer;
    Buffer: ARRAY [0..TcUnit.GVL_Param_TcUnit.BufferSize-1] OF BYTE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Test_BufferSize();
Test_Length();
Test_Append();
Test_Clear();
Test_Find();
Test_Copy();
Test_CutOff();]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{d1d5b2df-a457-4a7f-a363-2b069698df60}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Stream.Setbuffer(ADR(Buffer), SIZEOF(Buffer));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Append" Id="{c9f256b4-b10a-4c18-ac2e-375993748010}">
      <Declaration><![CDATA[METHOD PRIVATE Test_Append
VAR
    Str1    : STRING := 'Vita est dolor sic ars.';
    Str2    : STRING := 'Vincit qui se vincit.  ';
    Search  : STRING := 'se';
    Test    : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test_Append');

Stream.Clear();

Stream.Append:= Str1;
Stream.Append:= Str2;

(* search *)
Test := ( Stream.Find( SearchString := Search, StartPos := 1 ) >=0 ); 

AssertTrue(Condition := Test, 
           Message := 'Append Failed');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_BufferSize" Id="{cf4c2c43-ae1b-4bba-857c-6ebb6d182932}">
      <Declaration><![CDATA[METHOD PRIVATE Test_BufferSize
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_BufferSize');

(* Compare initialised buffersize with expected buffersize *)
AssertEquals_UDINT(Expected := GVL_Param_TcUnit.BufferSize,
                   Actual := Stream.BufferSize, 
                   Message := 'BufferSize differs');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Clear" Id="{591d2216-16ba-4bde-a924-7cd4ef7f6cf2}">
      <Declaration><![CDATA[METHOD PRIVATE Test_Clear
VAR
    Str : STRING := 'vita est dolor sic ars';
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Test('Test_Clear');

Stream.Clear();

Stream.Append := Str;

Stream.Clear();

AssertEquals_UDINT(Expected := 0,
                   Actual := Stream.Length, 
                   Message := 'Length differs');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Copy" Id="{bf842fe0-711d-49e6-a319-2598d4654f70}">
      <Declaration><![CDATA[METHOD PRIVATE Test_Copy
VAR
    Str1    : STRING := 'Vincit qui se vincit.  ';
    Str2    : STRING := 'Vita est dolor sic ars.';
    Cpy     : STRING;
    CopyLen : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_Copy');

Stream.Clear();

Stream.Append := Str1;

Stream.Append := Str2;

(* copy from 8th char 3 chars (8+3=11), should be 'qui' *)
Cpy := Stream.Copy(StartPos := 8, EndPos := 11, CopyLen => CopyLen); 

AssertEquals_STRING(Expected := 'qui',
                    Actual := Cpy,
                    Message := 'Copy Failed');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_CutOff" Id="{fe4a5c0d-d938-476b-a07d-39bbb0824237}">
      <Declaration><![CDATA[METHOD PRIVATE Test_CutOff
VAR
    Str : STRING := 'vita est dolor sic ars';
    Cut : UDINT;
    Length : UDINT;
    CutOff : STRING;
    Expected: STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_CutOff');

Stream.Clear();

(* Last char - 2 chars = 3 chars in total *)
Stream.Append := Str;

Cut := (Stream.Length-2); 

(* CutOff should contain 'ars' *)
CutOff := Stream.CutOff(StartPos := Cut, CutLen => Length);

Expected := Stream.Copy(StartPos := 1, EndPos := Stream.Length); 

AssertEquals_String(Expected := Expected, 
                    Actual := 'vita est dolor sic',
                    Message := 'CutOff string differs');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Find" Id="{808d1d3f-d265-4faa-8209-c1d8803e9c8f}">
      <Declaration><![CDATA[METHOD PRIVATE Test_Find
VAR
    Str    : STRING := 'Vita est dolor sic ars.';
    Search : STRING := 'dolor';
    Test : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TcUnit.TEST('Test_Find');

Stream.Clear();

Stream.Append:= Str;

(* start search at 1st char *)
Test := ( Stream.Find(SearchString := str, StartPos := 1 ) >=0 ); 

AssertTrue(Condition := Test, 
           Message := 'Find Failed');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Length" Id="{6f36830f-7238-4c4d-8783-cb9afb4c22b1}">
      <Declaration><![CDATA[METHOD PRIVATE Test_Length
VAR
    Str : STRING := 'vita est dolor sic ars';
    Length : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_Length');

Stream.Clear();

Stream.Append := Str;

Length := TO_UDINT(LEN(Str));

AssertEquals_UDINT(Expected := length, 
                   Actual := Stream.Length, 
                   Message := 'Length differs');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>