<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_TestStreamBuffer" Id="{434f58c4-0d06-4401-96df-b925ff7016a9}" SpecialFunc="None">
    <Declaration><![CDATA[(*
    Contains tests that verify the StreamBuffer function block methods
*)
FUNCTION_BLOCK FB_TestStreamBuffer EXTENDS TcUnit.FB_TestSuite
VAR
    Stream : FB_StreamBuffer;
    Buffer: ARRAY [0.. TcUnit.GVL_Param_XmlControl.MaxFileSize-1] OF BYTE;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Test_BufferSize();
Test_Length();
Test_Append();
//Test_Prepend();
Test_Clear();
Test_Find();
Test_Copy();
Test_CutOff();]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{720708a8-1b4a-481f-9ecb-7340ef13c824}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Stream.Set(ADR(Buffer), SIZEOF(Buffer));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Append" Id="{6d794ebb-50bc-429b-bdf0-67485b24f229}">
      <Declaration><![CDATA[METHOD PRIVATE Test_Append
VAR
    Str    : STRING := 'Vita est dolor sic ars.';
    PreStr : STRING := 'Vincit qui se vincit.  ';
    Found : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_Append');

Stream.Clear();

Stream.Append:= Str;

//Stream.Prepend := PreStr;

(* start search at 1st char *)
Found := ( Stream.Find( sSearchString := str, udiStartPos := 1 ) >=0 ); 

AssertTrue(Condition := Found, 
           Message := 'Append Failed');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_BufferSize" Id="{737938c1-5953-432f-a171-a8c0d4376f29}">
      <Declaration><![CDATA[METHOD PRIVATE Test_BufferSize
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_BufferSize');

AssertEquals_UDINT(Expected := TcUnit.GVL_Param_XmlControl.MaxFileSize,
                   Actual := Stream.BufferSize, 
                   Message := 'BufferSize differs');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Clear" Id="{fc32d0ae-502d-4a73-b236-b5f1396d8bef}">
      <Declaration><![CDATA[METHOD PRIVATE Test_Clear
VAR
    Str : STRING := 'vita est dolor sic ars';
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Test('Test_Clear');

Stream.Clear();

Stream.Append := Str;

Stream.Clear();

AssertEquals_UDINT(Expected := 0,
                   Actual := Stream.Length, 
                   Message := 'Length differs');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Copy" Id="{5176b675-03c3-4e01-87ed-ca5a61b34943}">
      <Declaration><![CDATA[METHOD PRIVATE Test_Copy
VAR
    Str    : STRING := 'Vita est dolor sic ars.';
    PreStr : STRING := 'Vincit qui se vincit.  ';
    Cpy    : STRING;
    CopyLen : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_Copy');

Stream.Clear();

Stream.Append:= Str;

//Stream.Prepend := PreStr;

(* copy from 8th char 3 chars (8+3=11), should be 'qui' *)
Cpy := Stream.Copy(udiStart := 8, UdiEnd := 11, udiCopyLen => CopyLen); 

AssertEquals_STRING(Expected := 'qui',
                    Actual := Cpy,
                    Message := 'Copy Failed');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_CutOff" Id="{964f719c-786d-4695-b2cd-f3f316f96eb1}">
      <Declaration><![CDATA[METHOD PRIVATE Test_CutOff
VAR
    Str : STRING := 'vita est dolor sic ars';
    Cut : UDINT;
    Length : UDINT;
    CutOff : STRING;
    Expected: STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_CutOff');

Stream.Clear();

(* Last char - 2 chars = 3 chars in total *)
Stream.Append := Str;

Cut := (Stream.Length-2); 

(* CutOff should contain 'ars' *)
CutOff := Stream.CutOff( UdiStartPos := Cut, udiCutLen => Length);

Expected := Stream.Copy(udiStart := 1, UdiEnd := Stream.Length); 

AssertEquals_String(Expected := Expected, 
                    Actual := 'vita est dolor sic',
                    Message := 'CutOff string differs');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Find" Id="{c4a3695b-5eed-486c-892e-616c4e8795eb}">
      <Declaration><![CDATA[METHOD PRIVATE Test_Find
VAR
    Str    : STRING := 'Vita est dolor sic ars.';
    PreStr : STRING := 'Vincit qui se vincit.  ';
    Found : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_Find');

Stream.Clear();

Stream.Append:= Str;

//Stream.Prepend := PreStr;

(* start search at 1st char *)
Found := ( Stream.Find( sSearchString := str, udiStartPos := 1 ) >=0 ); 

AssertTrue(Condition := Found, 
           Message := 'Find Failed');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Length" Id="{127a62cd-01fe-4aa9-a03e-7bf9d0360475}">
      <Declaration><![CDATA[METHOD PRIVATE Test_Length
VAR
    Str : STRING := 'vita est dolor sic ars';
    Length : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_Length');

Stream.Clear();

Stream.Append := Str;

Length := TO_UDINT(LEN(Str));

AssertEquals_UDINT(Expected := length, 
                   Actual := Stream.Length, 
                   Message := 'Length differs');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Prepend" Id="{8bb6b432-2afd-4bd3-ace7-2c3309c826e1}">
      <Declaration><![CDATA[METHOD PRIVATE Test_Prepend
VAR
    Str    : STRING := 'Vita est dolor sic ars.';
    PreStr : STRING := 'Vincit qui se vincit.  ';
    Found : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Test_Prepend');

Stream.Clear();

Stream.Append:= Str;

//Stream.Prepend := PreStr;

(* start search at 1st char *)
Found := ( Stream.Find( sSearchString := PreStr, udiStartPos := 1 ) >=0 ); 

AssertTrue(Condition := Found, 
           Message := 'Prepend Failed');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>