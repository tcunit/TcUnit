<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_AdsLogStringMessageFifoQueue" Id="{3920f5ea-d8f0-4a89-bcc8-7deea2b2fe33}" SpecialFunc="None">
    <Declaration><![CDATA[(* This function block is responsible for making sure that the ADSLOGSTR-messages to the ADS-router are transmitted
   cyclically and not in a burst. The reason this is necessary is because that if too many messages are sent at the
   same time some get lost and are never printed to the error list output
*)
FUNCTION_BLOCK FB_AdsLogStringMessageFifoQueue
VAR
    ArrayBuffer : ARRAY[0..((GVL_Param_TcUnit.AdsLogMessageFifoRingBufferSize * (SIZEOF(ST_ADSLogStringMessage) + MEM_RING_BUFFER_INTERNAL_USE_PER_DATA_RECORD)) - 1)] OF BYTE;
    MemRingBuffer : FB_MemRingBuffer;
    TimerBetweenMessages : TON := (IN := TRUE, PT := TIME_BETWEEN_MESSAGES);
END_VAR
VAR CONSTANT
    MEM_RING_BUFFER_INTERNAL_USE_PER_DATA_RECORD : USINT := 4;
    TIME_BETWEEN_MESSAGES : TIME := T#10MS;
END_VAR
VAR_TEMP
    MessageToBeSent : ST_AdsLogStringMessage;
    ErrorGet : BOOL;
    ReturnValue : DINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[TimerBetweenMessages();
IF GetLogCount() > 0 THEN
    // Timer has elapsed, print message
    IF TimerBetweenMessages.Q THEN
        GetAndRemoveLogFromQueue(AdsLogStringMessage => MessageToBeSent,
                                 Error => ErrorGet);
        IF NOT ErrorGet THEN
            ReturnValue := ADSLOGSTR(msgCtrlMask := MessageToBeSent.MsgCtrlMask,
                                     msgFmtStr := MessageToBeSent.MsgFmtStr,
                                     strArg := MessageToBeSent.StrArg);
        END_IF
        TimerBetweenMessages(IN := FALSE); // Reset timer
        TimerBetweenMessages.IN := TRUE;
    END_IF
END_IF]]></ST>
    </Implementation>
    <Method Name="GetAndRemoveLogFromQueue" Id="{cf4219dc-c784-4d39-983c-1e64371c4d5f}">
      <Declaration><![CDATA[(* Reads and removes the oldest message *)
METHOD PRIVATE GetAndRemoveLogFromQueue
VAR_OUTPUT
    AdsLogStringMessage : ST_ADSLogStringMessage;
    Error : BOOL; // Buffer empty
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[MemRingBuffer.A_RemoveHead(pRead := ADR(AdsLogStringMessage),
                           cbRead := SIZEOF(ST_ADSLogStringMessage),
                           pBuffer := ADR(ArrayBuffer),
                           cbBuffer := SIZEOF(ArrayBuffer));
Error := NOT MemRingBuffer.bOk;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetLogCount" Id="{b92b4756-7e23-4fd6-b9d4-ba80d89e5be5}">
      <Declaration><![CDATA[METHOD PRIVATE GetLogCount : UDINT]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetLogCount := MemRingBuffer.nCount;]]></ST>
      </Implementation>
    </Method>
    <Method Name="WriteLog" Id="{4ca4d063-d389-4869-8fdb-ce7017f310dc}">
      <Declaration><![CDATA[// Writes a new data set into the ring buffer
METHOD INTERNAL WriteLog
VAR_INPUT
    MsgCtrlMask : DWORD;
    MsgFmtStr : T_MaxString;
    StrArg : T_MaxString;
END_VAR
VAR_OUTPUT
    Error : BOOL; // Buffer overflow
END_VAR
VAR
    AdsLogStringMessage : ST_AdsLogStringMessage;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Only log message types of ERROR if log extended results is not enabled
IF MsgCtrlMask = ADSLOG_MSGTYPE_ERROR OR GVL_Param_TcUnit.LogExtendedResults THEN
    AdsLogStringMessage.MsgCtrlMask := MsgCtrlMask;
    AdsLogStringMessage.MsgFmtStr := MsgFmtStr;
    AdsLogStringMessage.StrArg := StrArg;

    MemRingBuffer.A_AddTail(pWrite := ADR(AdsLogStringMessage),
                            cbWrite := SIZEOF(ST_AdsLogStringMessage),
                            pBuffer := ADR(ArrayBuffer),
                            cbBuffer := SIZEOF(ArrayBuffer));

    Error := NOT MemRingBuffer.bOk;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>