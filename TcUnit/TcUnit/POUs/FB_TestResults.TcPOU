<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_TestResults" Id="{dcfade2b-3801-4064-9466-67a7a848e8d0}" SpecialFunc="None">
    <Declaration><![CDATA[(* This function block holds results of the complete test run, i.e. results for all test suites *)
FUNCTION_BLOCK FB_TestResults IMPLEMENTS I_TestResults
VAR
    (* Test results *)
    TestSuiteResults : ST_TestSuiteResults;

    (* Misc variables *)
    StoringTestSuiteResultNumber : UINT(1..GVL_Param_TcUnit.MaxNumberOfTestSuites);
    StoringTestSuiteTrigger : R_TRIG;
    StoredTestSuiteResults : BOOL;
    StoredGeneralTestResults : BOOL;
    NumberOfTestsToAnalyse : UINT(1..GVL_Param_TcUnit.MaxNumberOfTestsForEachTestSuite);
END_VAR
VAR_TEMP
    TestName : T_MaxString;

    TestsInTestSuiteCounter : UINT(1..GVL_Param_TcUnit.MaxNumberOfTestsForEachTestSuite);

    TestToBeStored : FB_Test;
    GeneralTestResultsTestSuitesCounter : UINT(1..GVL_Param_TcUnit.MaxNumberOfTestSuites);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* The body of the function block stores the test results *)
IF StoringTestSuiteResultNumber <= GVL_TcUnit.NumberOfInitializedTestSuites AND NOT StoredTestSuiteResults THEN
    (*StoringTestSuiteTrigger(CLK := GVL_TcUnit.TestSuiteAddresses[StoringTestSuiteResultNumber]^.AreAllTestsFinished() AND
								   GVL_TcUnit.TestSuiteAddresses[StoringTestSuiteResultNumber]^.GetDuration() > 0);*)
	StoringTestSuiteTrigger(CLK := GVL_TcUnit.TestSuiteAddresses[StoringTestSuiteResultNumber]^.AreAllTestsFinished());

    IF StoringTestSuiteTrigger.Q THEN

        (* Store test suite name and ID *)
        TestSuiteResults.TestSuiteResults[StoringTestSuiteResultNumber].Name := 
			GVL_TcUnit.TestSuiteAddresses[StoringTestSuiteResultNumber]^.GetTestSuiteName();
        TestSuiteResults.TestSuiteResults[StoringTestSuiteResultNumber].Identity := StoringTestSuiteResultNumber - 1;

        (* Store number of tests in test suite *)
        TestSuiteResults.TestSuiteResults[StoringTestSuiteResultNumber].NumberOfTests :=
            GVL_TcUnit.TestSuiteAddresses[StoringTestSuiteResultNumber]^.GetNumberOfTests();

        (* Store number of failed tests in test suite *)
        TestSuiteResults.TestSuiteResults[StoringTestSuiteResultNumber].NumberOfFailedTests :=
            GVL_TcUnit.TestSuiteAddresses[StoringTestSuiteResultNumber]^.GetNumberOfFailedTests();

        (* Store the duration *)
        TestSuiteResults.TestSuiteResults[StoringTestSuiteResultNumber].Duration :=
            GVL_TcUnit.TestSuiteAddresses[StoringTestSuiteResultNumber]^.GetDuration();

        (* Limit the test analyse to the max array limit of 'Tests[]' in FB_TestSuite *)
        NumberOfTestsToAnalyse := GVL_TcUnit.TestSuiteAddresses[StoringTestSuiteResultNumber]^.GetNumberOfTestsToAnalyse();

        (* Iterate and print all tests in test suite *)
        FOR TestsInTestSuiteCounter := 1 TO NumberOfTestsToAnalyse BY 1 DO
            TestToBeStored := GVL_TcUnit.TestSuiteAddresses[StoringTestSuiteResultNumber]^.GetTestByPosition(TestsInTestSuiteCounter);
            (* Store test name *)
            TestSuiteResults.TestSuiteResults[StoringTestSuiteResultNumber].TestCaseResults[TestsInTestSuiteCounter].TestName := TestToBeStored.GetName();

            (* Store test class name *)
            TestSuiteResults.TestSuiteResults[StoringTestSuiteResultNumber].TestCaseResults[TestsInTestSuiteCounter].TestClassName :=
                F_RemoveInstancePathAndProjectNameFromTestInstancePath(GVL_TcUnit.TestSuiteAddresses[StoringTestSuiteResultNumber]^.GetTestSuiteName());

            (* Store whether the test has failed *)
            TestSuiteResults.TestSuiteResults[StoringTestSuiteResultNumber].TestCaseResults[TestsInTestSuiteCounter].TestIsFailed :=
                TestToBeStored.IsFailed();

            (* Store whether the test was skipped *)
            TestSuiteResults.TestSuiteResults[StoringTestSuiteResultNumber].TestCaseResults[TestsInTestSuiteCounter].TestIsSkipped :=
                TestToBeStored.IsSkipped();

            (* Store the (first failed) assertion message *)
            TestSuiteResults.TestSuiteResults[StoringTestSuiteResultNumber].TestCaseResults[TestsInTestSuiteCounter].FailureMessage :=
                TestToBeStored.GetAssertionMessage();

            (* Store the (first failed) assertion type *)
            TestSuiteResults.TestSuiteResults[StoringTestSuiteResultNumber].TestCaseResults[TestsInTestSuiteCounter].FailureType :=
                TestToBeStored.GetAssertionType();

            (* Store number of assertions made *)
            TestSuiteResults.TestSuiteResults[StoringTestSuiteResultNumber].TestCaseResults[TestsInTestSuiteCounter].NumberOfAsserts :=
                TestToBeStored.GetNumberOfAssertions();

            (* Store the duration of the test *)
            TestSuiteResults.TestSuiteResults[StoringTestSuiteResultNumber].TestCaseResults[TestsInTestSuiteCounter].Duration :=
                TestToBeStored.GetDuration();
        END_FOR

        IF StoringTestSuiteResultNumber = GVL_TcUnit.NumberOfInitializedTestSuites THEN
            StoredTestSuiteResults := TRUE;
        ELSE
            StoringTestSuiteResultNumber := StoringTestSuiteResultNumber + 1;
        END_IF
        StoringTestSuiteTrigger(CLK := FALSE); // Reset trigger
    END_IF
END_IF

(* If all test suites have finished running, store the general test results *)
(* Take care of the special case where no tests have not yet been defined *)
IF GVL_TcUnit.NumberOfInitializedTestSuites = 0 AND (NOT StoredGeneralTestResults) THEN
    StoredGeneralTestResults := TRUE;
    StoredTestSuiteResults := TRUE;
ELSIF StoringTestSuiteResultNumber = GVL_TcUnit.NumberOfInitializedTestSuites AND_THEN
    GVL_TcUnit.TestSuiteAddresses[StoringTestSuiteResultNumber]^.AreAllTestsFinished() AND StoredTestSuiteResults AND (NOT StoredGeneralTestResults) THEN
    TestSuiteResults.NumberOfTestSuites := GVL_TcUnit.NumberOfInitializedTestSuites;
	GVL_TcUnit.Duration := LWORD_TO_LREAL(F_GetCpuCounterAs64bit(GVL_TcUnit.GetCpuCounter) - GVL_TcUnit.StartedAt) * GVL_TcUnit.HundredNanosecondToSecond; // Seconds
    TestSuiteResults.Duration := GVL_TcUnit.Duration;
    FOR GeneralTestResultsTestSuitesCounter := 1 TO GVL_TcUnit.NumberOfInitializedTestSuites BY 1 DO
        TestSuiteResults.NumberOfTestCases := TestSuiteResults.NumberOfTestCases + TestSuiteResults.TestSuiteResults[GeneralTestResultsTestSuitesCounter].NumberOfTests;
        TestSuiteResults.NumberOfSuccessfulTestCases := TestSuiteResults.NumberOfSuccessfulTestCases +
                                                        (TestSuiteResults.TestSuiteResults[GeneralTestResultsTestSuitesCounter].NumberOfTests -
                                                         TestSuiteResults.TestSuiteResults[GeneralTestResultsTestSuitesCounter].NumberOfFailedTests);
        TestSuiteResults.NumberOfFailedTestCases := TestSuiteResults.NumberOfFailedTestCases + TestSuiteResults.TestSuiteResults[GeneralTestResultsTestSuitesCounter].NumberOfFailedTests;
    END_FOR
    StoredGeneralTestResults := TRUE;
END_IF]]></ST>
    </Implementation>
    <Method Name="GetAreTestResultsAvailable" Id="{1405a17f-835e-481b-8bc4-6f447bc860a2}">
      <Declaration><![CDATA[(* Returns whether the storing of the test results is finished *)
METHOD PUBLIC GetAreTestResultsAvailable : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetAreTestResultsAvailable := (StoredTestSuiteResults AND StoredGeneralTestResults);]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTestSuiteResults" Id="{3d7cfdb1-16a3-456d-be0a-82cecf4820a8}">
      <Declaration><![CDATA[METHOD PUBLIC GetTestSuiteResults : REFERENCE TO ST_TestSuiteResults;]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetTestSuiteResults REF=TestSuiteResults;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>