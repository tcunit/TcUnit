<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.9">
  <POU Name="FB_ADSTestResultFormatter" Id="{d14d6247-3ce3-459f-be22-6ee3520279ed}" SpecialFunc="None">
    <Declaration><![CDATA[(*
    This function block reports the results from the tests using the built-in ADSLOGSTR functionality
    provided by the Tc2_System library. This sends the result using ADS, which is consumed by the error list
    of Visual Studio.
*)
FUNCTION_BLOCK FB_ADSTestResultFormatter IMPLEMENTS I_TestResultFormatter
VAR
    (* Although we can print a message no #1 prior to message no #2, the message #2 can still be displayed before
       message #1, most likely because of some delay of the ADS data. To workaround this, we add a small delay between
       transmission of the ADS messages. *)
    ADSDelayTimer : Tc2_Standard.TON := (PT := T#300MS);
    LastPrintState : USINT := 0;
    PrintState : USINT := 0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Format" Id="{dba8c729-8b99-4be3-97cd-3a4fea4cd051}">
      <Declaration><![CDATA[METHOD Format
VAR_INPUT
    (* The total amount of test suites *)
    AmountOfTestSuites    : UINT;
    (* The total amount of test cases (for all test function blocks) *)
    AmountOfTestCases    : UINT;
    (* The total amount of test cases that had all ASSERTS successful *)
    AmountOfSuccessfulTestCases    : UINT;
    (* The total amount of test cases that had at least one ASSERT failed *)
    AmountOfFailedTestCases    : UINT;
END_VAR
VAR_OUTPUT
    Busy : BOOL;
END_VAR
VAR
    ErrorCode : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE PrintState OF
    0 :
        LastPrintState := PrintState;
        PrintState := 100;
        Busy := TRUE;
    1 :
        ErrorCode := Tc2_System.ADSLOGSTR(msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_ERROR,
                                          msgFmtStr := '%s',
                                          strArg := '| ==========TESTS FINISHED RUNNING==========');
        LastPrintState := PrintState;
        PrintState := 100;
        Busy := TRUE;
    2 :
        ErrorCode := Tc2_System.ADSLOGSTR(msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_ERROR,
                                          msgFmtStr := '| Test suites: %s',
                                          strArg := UINT_TO_STRING(AmountOfTestSuites));
        LastPrintState := PrintState;
        PrintState := 100;
        Busy := TRUE;
    3 :
        ErrorCode := Tc2_System.ADSLOGSTR(msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_ERROR,
                                          msgFmtStr := '| Tests: %s',
                                          strArg := UINT_TO_STRING(AmountOfTestCases));
        LastPrintState := PrintState;
        PrintState := 100;
        Busy := TRUE;
    4 :
        ErrorCode := Tc2_System.ADSLOGSTR(msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_ERROR,
                                          msgFmtStr := '| Successful tests: %s',
                                          strArg := UINT_TO_STRING((AmountOfSuccessfulTestCases)));
        LastPrintState := PrintState;
        PrintState := 100;
        Busy := TRUE;
    5 :
        ErrorCode := Tc2_System.ADSLOGSTR(msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_ERROR,
                                          msgFmtStr := '| Failed tests : %s',
                                          strArg := UINT_TO_STRING(AmountOfFailedTestCases));
        LastPrintState := PrintState;
        PrintState := 100;
        Busy := TRUE;
    6 :
        ErrorCode := Tc2_System.ADSLOGSTR(msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_ERROR,
                                          msgFmtStr := '%s',
                                          strArg := '| ======================================');
        LastPrintState := PrintState;
        PrintState := 100;
        Busy := TRUE;
    7 :
        Busy := FALSE;
    100 :
        ADSDelayTimer(IN := TRUE);
        IF ADSDelayTimer.Q THEN
            ADSDelayTimer(IN := FALSE);
            PrintState := LastPrintState + 1;
        END_IF
        Busy := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ADSTestResultFormatter">
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_ADSTestResultFormatter.Format">
      <LineId Id="18" Count="3" />
      <LineId Id="74" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="92" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="75" Count="0" />
      <LineId Id="29" Count="35" />
      <LineId Id="66" Count="7" />
      <LineId Id="17" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>