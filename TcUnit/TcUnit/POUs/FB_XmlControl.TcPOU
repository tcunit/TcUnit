<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_XmlControl" Id="{f48b7de2-5c07-4763-a8be-3d8ab3c1f58c}" SpecialFunc="None">
    <Declaration><![CDATA[(*
Organizes parsing and composing of XML data. Data can be treated as STRING or char array.
Filebuffersize can be set via Gvl_Param_XmlControl

Usage example:

1. Initiate
    VAR
        XML : FB_XMLControl;
        Buffer: STRING(GVL_Param_XmlControl.MaxFileSize);
        //or
        Buffer: ARRAY [0..GVL_Param_XmlControl.MaxFileSize] OF BYTE;
    END_VAR

        XML.pBuffer: = ADR (buffer);
        XML.LenBuffer: = SIZEOF (buffer);

    Add your own preferred fileheader like so:
    XML: <?xml version="1.0" encoding="UTF-8"?>
   
        XML.WriteDocumentHeader( '<?xml version="1.0" encoding="UTF-8"?>');

2. Compose a tag with a parameters:
XML: <MyTag ParaName = "11" />

    XML.newTag(sTagName: = 'MyTag');
    XML.newPara(sName: = 'ParaName', sPara: = sValue);
    XML.CloseTag();


3. Add tag value:
XML: <MyTag> MyText </ MyTag>

    XML.newTag(sName := 'MyTag');
    XML.newTagData(sTagData :='MyText');
    XML.CloseTag();


4. Jump to the beginning of the XML data
XML.toStartBuffer();


5. Add a comment:
XML: <!-- MyComment -->

    XML.newComment(sTagName: = 'MyComment');

6. Returns the next tag from the current position in buffer
XML.NextTag();


7. Output the parameter of the tag
XML.NextPara(sPara: = LastValue);
Feedback: sPara returns the value found (string)

*)
//{attribute 'hide_all_locals'}
FUNCTION_BLOCK FB_XmlControl
VAR
    Buffer : FB_StreamBuffer;
    TagList : FB_StreamBuffer;
    sTags : T_MaxString;
    TagListSeek : FB_StreamBuffer;
    sTagsSeek : STRING;
    Tag : FB_StreamBuffer;
    sTag : T_MaxString;
    xTagOpen: BOOL;
    iSelect : UDINT;
    iSelectStart : UDINT;
    iSelectEnd : UDINT;
    iSelectStartPara : UDINT;
    iSelectEndPara : UDINT;
    iSelectTagClose : UDINT;
    iSelectStartValue : UDINT;
    iSelectEndValue : UDINT;
    udiSearchPos : UDINT; 
END_VAR
VAR CONSTANT
    TAG_OPEN : STRING(1) := '<';
    TAG_CLOSE : STRING(1) := '>';
    END_TAG_CLOSE : STRING(4) := '/>';
    SPACE : STRING(1) := ' ';
    EQUALS : STRING(1) := '=';
    QUOTE : STRING(1) := '"';
    BACK_SLASH : STRING(1) := '\';
    FORWARD_SLASH : STRING(1) := '/';
    OPEN_COMMENT : STRING(5) := '<!-- ';
    CLOSE_COMMENT : STRING(4) := ' -->';
    TAB : STRING(2) := '$T';
	CR_LF : STRING(4) := '$R$N';
  
	//$OD : ASCII code for carriage return (CR)
	//$$ : to add a $R
	//$' : to add ' (apostrophe)
	//$L or $l : line feed
	//$N or $n : new line
	//$P or $p : next page
	//$R or $r : end of line
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="ClearBuffer" Id="{651b4460-232e-47e8-95ba-ecea1541fbb9}">
      <Declaration><![CDATA[(* 
    Clears the contents of the entire buffer
*)
METHOD PUBLIC ClearBuffer]]></Declaration>
      <Implementation>
        <ST><![CDATA[udiSearchPos := 0;
TagListSeek.Length := 0;
Buffer.Length := 0;
sTagsSeek := '';
sTag := '';]]></ST>
      </Implementation>
    </Method>
    <Method Name="CloseTag" Id="{eedd2aac-2425-4325-8128-bfe1e984f3f7}">
      <Declaration><![CDATA[(*
    Closes a Tag:
    XML: <MyTag />'

    Method: XML.CloseTag();
*)
METHOD PUBLIC CloseTag : T_MaxString]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF xTagOpen THEN
    Buffer.Append := END_TAG_CLOSE;
    iSelect := TagList.FindBack(sSearchString := FORWARD_SLASH);
    CloseTag := TagList.CutOff(udiStartPos:= iSelect);
    xTagOpen := FALSE;
ELSE
    iSelect := TagList.FindBack(sSearchString := FORWARD_SLASH);
    CloseTag := TagList.CutOff(udiStartPos:= iSelect);
    Buffer.Append := TAG_OPEN;
    Buffer.Append := CloseTag;
    Buffer.Append := TAG_CLOSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Length" Id="{4fdf30b6-5fe7-4452-ad0a-85e866e236d0}">
      <Declaration><![CDATA[PROPERTY Length : UDINT]]></Declaration>
      <Get Name="Get" Id="{267105d4-b124-4c5c-a359-0434c4992afc}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Length := Buffer.Length;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="NewComment" Id="{0f41fa45-b92e-4e7e-b2b3-ecb5d5918326}">
      <Declaration><![CDATA[(*
    Adds a comment;
    XML: <!-- MyComment -->

    XML.NewComment(Comment: = 'MyComment');
*)
METHOD PUBLIC NewComment
VAR_INPUT
    Comment : T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF xTagOpen THEN
    Buffer.Append := TAG_CLOSE;
    xTagOpen := FALSE;
END_IF;
Buffer.Append := OPEN_COMMENT;
Buffer.Append := Comment;
Buffer.Append := CLOSE_COMMENT;]]></ST>
      </Implementation>
    </Method>
    <Method Name="NewParameter" Id="{60c10606-ff09-4f9b-a3dd-0b54d0f565c7}">
      <Declaration><![CDATA[(*
    Must be called after opening a new tag

    XML.NewParameter(Name: = 'ParaName', Value: = 'Value');
*)
METHOD PUBLIC NewParameter
VAR_INPUT
    Name : T_MaxString;
    Value : T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Buffer.Append := SPACE;  
Buffer.Append := Name;
Buffer.Append := EQUALS; 
Buffer.Append := QUOTE; 
Buffer.Append := Value;
Buffer.Append := QUOTE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="NewTag" Id="{c44bdbda-725a-4943-a5cc-fa5ea9485541}">
      <Declaration><![CDATA[(*
    Creates a new Tag:
    XML: <MyTag>

    XML.NewTag(Name: = 'MyTag');
*)
METHOD PUBLIC NewTag
VAR_INPUT
    Name : T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF xTagOpen THEN
    Buffer.Append := TAG_CLOSE;
END_IF;
Buffer.Append := TAG_OPEN;
Buffer.Append := Name;
xTagOpen := TRUE;
TagList.Append := FORWARD_SLASH;
TagList.Append := Name;]]></ST>
      </Implementation>
    </Method>
    <Method Name="NewTagData" Id="{e4679d3f-10eb-47fd-936c-97e3aaaa3768}">
      <Declaration><![CDATA[METHOD PUBLIC NewTagData
VAR_INPUT
    Data : T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Buffer.Append := TAG_CLOSE;
Buffer.Append := Data;
xTagOpen := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="NextParameter" Id="{4394d0a2-f7bc-4847-9625-00022c462a79}">
      <Declaration><![CDATA[METHOD PUBLIC NextParameter : T_MaxString;
VAR_OUTPUT
    Parameter : T_MaxString;
END_VAR
VAR
    Name : T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[iSelectEndPara := Buffer.Find(sSearchString := EQUALS, udiStartPos := iSelectStartPara);
IF iSelectStartPara < iSelectEnd AND iSelectEndPara < iSelectEnd THEN
    Name := Buffer.Copy( udiStart := iSelectStartPara + 1, udiEnd := iSelectEndPara);
    iSelectStartValue := Buffer.Find(sSearchString := QUOTE, udiStartPos := iSelectEndPara);
    iSelectEndValue := Buffer.Find(sSearchString := QUOTE, udiStartPos := iSelectStartValue);
    Parameter := Buffer.Copy( udiStart := iSelectStartValue + 1, udiEnd := iSelectEndValue);
    iSelectStartPara := iSelectEndValue + 1;
ELSE
    iSelectEndValue := Buffer.Find(sSearchString := TAG_OPEN, udiStartPos := udiSearchPos);
    Name := Buffer.Copy( udiStart := udiSearchPos + 1, udiEnd := iSelectEndValue); 
END_IF;
NextParameter := Name;]]></ST>
      </Implementation>
    </Method>
    <Method Name="NextTag" Id="{d039b781-905d-4b69-b5aa-bb0323e598de}">
      <Declaration><![CDATA[METHOD PUBLIC NextTag : T_MaxString]]></Declaration>
      <Implementation>
        <ST><![CDATA[iSelectStart := Buffer.Find(sSearchString := TAG_OPEN, udiStartPos := udiSearchPos);
iSelectEnd := Buffer.Find(sSearchString := TAG_CLOSE, udiStartPos := iSelectStart);
iSelectStartPara := Buffer.Find(sSearchString := SPACE, udiStartPos := iSelectStart);
iSelectTagClose := Buffer.Find(sSearchString := FORWARD_SLASH, udiStartPos := iSelectStart);
IF iSelectStart < Buffer.Length AND iSelectEnd < Buffer.Length THEN
    udiSearchPos := iSelectEnd;
    sTag := Buffer.Copy( udiStart:= iSelectStart + 1, udiEnd:= iSelectEnd);
    IF iSelectEnd < iSelectStartPara THEN
        NextTag := Buffer.Copy( udiStart:= iSelectStart + 1, udiEnd:= iSelectEnd);
    ELSE
        NextTag := Buffer.Copy( udiStart:= iSelectStart + 1, udiEnd:= iSelectStartPara);
    END_IF;
    IF iSelectTagClose = iSelectStart + 1 THEN
        iSelect := TagListSeek.FindBack(sSearchString := FORWARD_SLASH);
        TagListSeek.CutOff(udiStartPos:= iSelect);
    ELSIF iSelectTagClose > iSelectStart AND iSelectTagClose < iSelectEnd THEN
        TagListSeek.Append := FORWARD_SLASH;
        TagListSeek.Append := NextTag;
        iSelect := TagListSeek.FindBack(sSearchString := FORWARD_SLASH);
        TagListSeek.CutOff(udiStartPos:= iSelect);
    ELSE
        TagListSeek.Append := FORWARD_SLASH;
        TagListSeek.Append := NextTag;
    END_IF;
ELSE
    udiSearchPos := Buffer.Length;
    NextTag := '';
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetBuffer" Id="{cbfaa6d5-eab9-48d0-a339-a8bf334e344e}">
      <Declaration><![CDATA[METHOD PUBLIC SetBuffer
VAR_INPUT
    pString : POINTER TO BYTE;
    iSizeOf : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Buffer.Set(pbyAdr := pString, udiSize := iSizeOf);
TagList.Set(pbyAdr := ADR(sTags), udiSize := SIZEOF(sTags));
TagListSeek.Set(pbyAdr := ADR(sTagsSeek), udiSize := SIZEOF(sTagsSeek));
Tag.Set(pbyAdr := ADR(sTag), udiSize := SIZEOF(sTag));]]></ST>
      </Implementation>
    </Method>
    <Method Name="ToStartBuffer" Id="{cb065068-a6c8-48d5-8c1d-535a21365348}">
      <Declaration><![CDATA[(*
    Jump to the beginning of the XML data
    XML.ToStartBuffer();
*)
METHOD PUBLIC ToStartBuffer]]></Declaration>
      <Implementation>
        <ST><![CDATA[udiSearchPos := 0;
TagListSeek.Length := 0;
sTagsSeek := '';
sTag := '';]]></ST>
      </Implementation>
    </Method>
    <Method Name="WriteDocumentHeader" Id="{14bf2549-9e7d-451f-8ab5-fe662eb30712}">
      <Declaration><![CDATA[(*
    Add your own preffered fileheader like:
    XML: <?xml version="1.0" encoding="UTF-8"?>

    XML.WriteDocumentHeader('<?xml version="1.0" encoding="UTF-8"?>');
*)
METHOD PUBLIC WriteDocumentHeader
VAR_INPUT
    Header : T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Buffer.Prepend := Concat(Header, CR_LF);
Buffer.Prepend := Header;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>