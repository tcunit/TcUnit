<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_StreamBuffer" Id="{fbccbed5-94ee-455b-a9d5-e8b750ed732e}" SpecialFunc="None">
    <Declaration><![CDATA[(*
    Acts as a streambuffer for use with FB_XmlControl
*)
FUNCTION_BLOCK FB_StreamBuffer 
VAR
    PointerToStringBuffer : POINTER TO BYTE;
    BufSize : UDINT;
    Len : UDINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="Append" Id="{ddd7c0b6-46f9-4fa9-946e-0da608268245}">
      <Declaration><![CDATA[(* 
    Appends a string to the buffer
*)
PROPERTY Append : T_MaxString]]></Declaration>
      <Set Name="Set" Id="{2498d17a-6a8a-4bf1-a5ce-9c1a248a9710}">
        <Declaration><![CDATA[VAR
    pByteIn : POINTER TO BYTE;
    pByteBuffer : POINTER TO BYTE;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[pByteIn := ADR(Append); 
pByteBuffer := PointerToStringBuffer + Len; // set start address

WHILE pByteIn^ <> 0 AND (Len < BufSize ) DO
    pByteBuffer^ := pByteIn^; //Copy the 1st byte
    
    Len := Len + 1; // set new buffer length
    
    pByteIn := pByteIn + 1; // calculate new start address 
    pByteBuffer := pByteBuffer + 1; // calculate new start address 
END_WHILE;

pByteBuffer := PointerToStringBuffer + Len; // String End
pByteBuffer^ := 0; // null terminated string
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="BufferSize" Id="{879a667c-416e-4879-91ff-6641233ded93}">
      <Declaration><![CDATA[(*
    Read current Buffersize
*)
PROPERTY BufferSize : UDINT]]></Declaration>
      <Get Name="Get" Id="{c7ad50d6-c68e-4f97-8e99-a8d5c013ef7a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[BufferSize := BufSize;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Clear" Id="{5f0bbce2-2600-4a2e-8c6f-4b957ad03395}">
      <Declaration><![CDATA[(*
    Reinitialises the buffer and sets the bufferlength to 0
*)
METHOD Clear
VAR_INPUT
END_VAR
VAR 
	LoopCount : UDINT;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (PointerToStringBuffer = 0) OR (BufSize = 0) THEN
	RETURN;
END_IF

FOR LoopCount := 0 TO (BufSize-1) DO
	PointerToStringBuffer[LoopCount] := 0;
END_FOR

Len := 0; ]]></ST>
      </Implementation>
    </Method>
    <Method Name="Copy" Id="{b796dd60-63f5-4b75-acc5-8fa40e24be46}">
      <Declaration><![CDATA[(* 
    Copies a string from the character buffer
*)
METHOD Copy : T_MaxString
VAR_INPUT
    StartPos : UDINT;
    EndPos : UDINT;
END_VAR
VAR_OUTPUT
    CopyLen : UDINT;
    XmlError : E_XmlError;
END_VAR
VAR
    LoopCount : UDINT;
    PointerToByteCopy : POINTER TO BYTE;
    PointerToByteBuffer1 : POINTER TO BYTE;
    CurPos : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[LoopCount := 0;
PointerToByteCopy := ADR(Copy);
PointerToByteBuffer1 := PointerToStringBuffer + StartPos - 1;

WHILE(LoopCount < SIZEOF(Copy)) AND (StartPos - 1 + LoopCount < Len) AND (StartPos + LoopCount < EndPos) DO
    PointerToByteCopy^ := PointerToByteBuffer1^;
    LoopCount := LoopCount + 1;
    PointerToByteCopy := ADR(Copy) + LoopCount;
    PointerToByteBuffer1 := PointerToStringBuffer + StartPos + LoopCount -1;
END_WHILE;

IF LoopCount = SIZEOF(Copy) THEN
    XmlError := E_XmlError.ErrorStringLen;
ELSIF StartPos - 1 + LoopCount = Len THEN
    XmlError := E_XmlError.ErrorMaxBufferLen;
ELSE
    XmlError := E_XmlError.OK;
END_IF;

PointerToByteCopy^ := 0;
CopyLen :=  LoopCount;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CutOff" Id="{8914e4f8-8b6c-48c3-ba1f-e0642038624a}">
      <Declaration><![CDATA[METHOD CutOff : STRING
VAR_INPUT
    udiStartPos : UDINT;
END_VAR
VAR_OUTPUT
    udiCutLen : UDINT; 
    XmlError : E_XmlError;
END_VAR
VAR
    LoopCount : UDINT;
    pByteCut : POINTER TO BYTE;
    pByteBuffer : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[LoopCount := 0;
pByteCut := ADR(CutOff);
pByteBuffer := PointerToStringBuffer + udiStartPos - 1;

WHILE pByteBuffer^ <> 0 AND(LoopCount < SIZEOF(CutOff)) AND udiStartPos -1  + LoopCount < Len DO
    pByteCut^ := pByteBuffer^;
    LoopCount := LoopCount + 1;
    pByteCut := ADR(CutOff) + LoopCount;
    pByteBuffer := PointerToStringBuffer + udiStartPos - 1 + LoopCount;
END_WHILE;

IF pByteBuffer^ = 0 THEN
    XmlError := E_XmlError.OK;
ELSIF LoopCount = SIZEOF(CutOff) THEN
    XmlError := E_XmlError.ErrorStringLen;
ELSIF udiStartPos -1 + LoopCount = Len THEN
    XmlError := E_XmlError.ErrorMaxBufferLen;
END_IF;

pByteCut^ := 0;
Len := udiStartPos -1;

pByteBuffer := PointerToStringBuffer + udiStartPos - 1;
pByteBuffer^ := 0;

udiCutLen := LoopCount;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Find" Id="{7e38490a-9555-451d-957e-fef284a567e3}">
      <Declaration><![CDATA[(* 
    Find a searchstring in the buffer and returns its position.
    It's possible to add a preffered startposition within buffer
*)
METHOD Find : UDINT
VAR_INPUT
    SearchString : STRING;
    StartPos : UDINT;
END_VAR
VAR
    LoopCount : UDINT;
    SearchCount : UDINT;
    PointerToBuffer : POINTER TO BYTE;
    PointerToSearch : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[LoopCount := 0;
SearchCount := 0;

PointerToBuffer := PointerToStringBuffer + StartPos;
PointerToSearch := ADR( SearchString);

WHILE(PointerToSearch^ <> 0 ) AND LoopCount + StartPos < Len DO
    IF PointerToBuffer^ <> PointerToSearch^ THEN
        LoopCount := LoopCount + 1;
        PointerToBuffer := PointerToStringBuffer + StartPos + LoopCount;
        PointerToSearch := ADR( SearchString);
        SearchCount := 0;
    ELSE
        SearchCount := SearchCount +1;
        PointerToBuffer := PointerToStringBuffer + StartPos + LoopCount + SearchCount;
        PointerToSearch := ADR( SearchString ) + SearchCount;
    END_IF;
END_WHILE;
Find := LoopCount + 1 + StartPos;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindBack" Id="{7d08b204-2078-4fde-81eb-e04d71986196}">
      <Declaration><![CDATA[METHOD FindBack : UDINT
VAR_INPUT
    SearchString : T_MaxString;
END_VAR
VAR
    LoopCount : UDINT;
    SearchCount : UDINT;
    PointerToBuffer : POINTER TO BYTE;
    PointerToSearch : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[LoopCount := 0;
SearchCount := 0;

PointerToBuffer := PointerToStringBuffer + Len;
PointerToSearch := ADR(SearchString);

WHILE(PointerToSearch^ <> 0 ) AND LoopCount < Len DO
    IF PointerToBuffer^ <> PointerToSearch^ THEN
        LoopCount := LoopCount + 1;
        PointerToBuffer := PointerToStringBuffer + Len - LoopCount;
        PointerToSearch := ADR( SearchString);
        SearchCount := 0;
    ELSE
        SearchCount := SearchCount + 1;
        PointerToBuffer := PointerToStringBuffer + Len - LoopCount + SearchCount;
        PointerToSearch := ADR( SearchString ) + SearchCount;
    END_IF;
END_WHILE;
FindBack :=  Len - LoopCount + 1;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Length" Id="{80c3b0fb-2bdc-4829-89c6-017e171b31eb}">
      <Declaration><![CDATA[PROPERTY Length : UDINT
]]></Declaration>
      <Get Name="Get" Id="{063f44b5-d97e-4feb-bc58-4bdd7430c0c3}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Length := Len;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c516394c-e0bf-40e3-8a00-92e5ec5cc151}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Len := Length;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="SetBuffer" Id="{59092938-ca22-4896-8f54-1c854a0bd883}">
      <Declaration><![CDATA[(* 
    Sets the Buffer
*)
METHOD SetBuffer : BOOL;
VAR_INPUT
    // Set buffer adress: ADR(..)
    PointerToStringBuf : POINTER TO BYTE;
    // Set buffer size: SIZEOF(..) 
    BufSize : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (PointerToStringBuf = 0) OR (BufSize = 0) THEN
    SetBuffer := FALSE;
    RETURN;
END_IF;

BufSize := BufSize;
PointerToStringBuffer := PointerToStringBuf;

SetBuffer := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>